apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kibana
    release: kibana
  name: kibana-kibana
  namespace: logging
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kibana
      release: kibana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: kibana
        release: kibana
    spec:
      containers:
      - env:
        - name: SERVER_PUBLICBASEURL
          value: https://logs-univ.sirius.online
        - name: ELASTICSEARCH_HOSTS
          value: http://elasticsearch-master:9200
        - name: SERVER_HOST
          value: 0.0.0.0
        image: cr.yandex/crpcm9tg75s8gu2hqkp9/kibana:7.16.1
        imagePullPolicy: IfNotPresent
        name: kibana
        ports:
        - containerPort: 5601
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              #!/usr/bin/env bash -e
              http () {
                  local path="${1}"
                  set -- -XGET -s --fail

                  if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                    set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                  fi

                  STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                  if [[ "${STATUS}" -eq 200 ]]; then
                    exit 0
                  fi

                  echo "Error: Got HTTP code ${STATUS} but expected a 200"
                  exit 1
              }

              http "/app/kibana"
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 800m
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 300Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: sirius-registry
      nodeSelector:
        node-role: monitoring
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: node-role
        operator: Equal
        value: monitoring
