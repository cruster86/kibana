---
elasticsearchPUBLICBASEURL: ""
elasticsearchHosts: ""
elasticsearchURL: ""
serverHost: "0.0.0.0"

replicas: 1

#image: "cr.yandex/crpcm9tg75s8gu2hqkp9/kibana"
image: "registry.sirius.online/infra/kibana"
imageTag: "7.16.1"
imagePullPolicy: "IfNotPresent"

labels: {}
annotations: {}
podAnnotations: {}

resources:
  requests:
    cpu: "100m"
    memory: "300Mi"
  limits:
    cpu: "800m"
    memory: "2Gi"

protocol: http

healthCheckPath: "/app/kibana"

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

automountToken: true

httpPort: 5601

updateStrategy:
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  type: RollingUpdate

service:
  type: ClusterIP
  port: 5601
  labels: {}
  annotations: {}
  httpPortName: http

basicAuth:
  enabled: false

ingress:
  enabled: false

readinessProbe:
  exec:
    command:
    - bash
    - -c
    - |
      #!/usr/bin/env bash -e
      # Disable nss cache to avoid filling dentry cache when calling curl
      # This is required with Kibana Docker using nss < 3.52
      export NSS_SDB_USE_CACHE=no
      http () {
          local path="${1}"
          set -- -XGET -s --fail -L
          if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
            set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
          fi
          STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
          if [[ "${STATUS}" -eq 200 ]]; then
            exit 0
          fi
          echo "Error: Got HTTP code ${STATUS} but expected a 200"
          exit 1
      }
      http "/app/kibana"
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 3
  timeoutSeconds: 5

imagePullSecrets:
- name: sirius-registry
- name: gitlab-registry

nodeSelector: {}

tolerations: []

affinity: {}

nameOverride: ""
fullnameOverride: ""
